* Global
  #+begin_src emacs-lisp :tangle yes

    ;; add custom packages to load path
    (add-to-list 'load-path "~/.emacs.d/lisp")
    ;; more custom packages?
    (let ((default-directory  "~/dotfiles/elisp"))
      (normal-top-level-add-subdirs-to-load-path))

    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
					    ;("marmalade" . "http://marmalade-repo.org/packages/")
			     ("melpa" . "https://melpa.org/packages/")))
    ;; (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
    ;; 		    (not (gnutls-available-p))))
    ;;        (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
    ;;   (add-to-list 'package-archives (cons "melpa" url) t))
    ;; (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
					    ;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
    (require 'package)
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
    (require 'use-package)
  #+end_src
** Backups
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src
** Appearance
   #+begin_src emacs-lisp :tangle yes
     (setq inhibit-startup-screen t)
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
       (setq dashboard-init-info "")
       (setq dashboard-footer-messages '(""))
       (setq dashboard-org-agenda-categories '("Tasks")))
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (global-visual-line-mode 1)

     (defalias 'yes-or-no-p 'y-or-n-p)

     (use-package diminish
       :ensure t)

     (use-package zenburn-theme
       :ensure t
       :config (load-theme 'zenburn t))

     (use-package highlight-parentheses
       :ensure t
       :hook ((emacs-lisp-mode lisp-mode) . highlight-parentheses-mode))


   #+end_src

** Keyboard and Movement
#+begin_src emacs-lisp :tangle yes
  (setq mac-option-key-is-meta nil
	mac-command-key-is-meta t
	mac-command-modifier 'meta
	mac-option-modifier 'super)
  (setq-default indent-tabes-mode nil)

  (defun push-mark-no-activate ()
    "Pushes `point' to `mark-ring' and does not activate the region
	   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
    (interactive)
    (push-mark (point) t nil)
    (message "Pushed mark to ring"))

  (global-set-key (kbd "C-`") 'push-mark-no-activate)

  (defun jump-to-mark ()
    "Jumps to the local mark, respecting the `mark-ring' order.
	  This is the same as using \\[set-mark-command] with the prefix argument."
    (interactive)
    (set-mark-command 1))
  (global-set-key (kbd "M-SPC") 'jump-to-mark)

  (use-package imenu-anywhere
       :ensure t
       :bind (("M-i" . imenu-anywhere))
       :config
       (defun my-merge-imenu ()
	 (interactive)
	 (let ((mode-imenu (imenu-default-create-index-function))
	       (custom-imenu (imenu--generic-function imenu-generic-expression)))
	   (append mode-imenu custom-imenu))))


  (use-package hydra
    :ensure t
    :config 
    (defhydra hydra-window-stuff (:hint nil)
      "
	    Split: _v_ert  _h_:horz
	   Delete: _c_lose  _o_nly
    Switch Window: arrow keys
	  Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file  _F_projectile
	     Move: _a_:up  _z_:down  _i_menu"


      ("z" scroll-up-line)
      ("a" scroll-down-line)
      ("i" idomenu)

      ("<left>" windmove-left)
      ("<down>" windmove-down)
      ("<up>" windmove-up)
      ("<right>" windmove-right)

      ("p" previous-buffer)
      ("n" next-buffer)
      ("b" ido-switch-buffer) 
      ("f" ido-find-file)
      ("F" projectile-find-file)

      ("h" split-window-right)
      ("v" split-window-below)

      ("c" delete-window)
      ("o" delete-other-windows)

      ("q" nil))
    :bind ("s-W" . hydra-window-stuff/body))


  (use-package avy
    :ensure t
    :config
    (defhydra goto (:color blue :hint nil :idle 0.5)
      "
  Goto:
  ^Char^              ^Word^                
  ^^^^^^^^----------------------------------
  _c_: 2 chars        _w_: word by char     
  _C_: char           _W_: some word        
  _L_: char in line   _s_: subword by char  
  ^  ^                _S_: some subword     
  ------------------------------------------
  _l_: avy-goto-line
  "
      ("c" avy-goto-char-2)
      ("C" avy-goto-char)
      ("L" avy-goto-char-in-line)
       ("w" avy-goto-word-1)
      ;; jump to beginning of some word
      ("W" avy-goto-word-0)
      ;; jump to subword starting with a char
      ("s" avy-goto-subword-1)
      ;; jump to some subword
      ("S" avy-goto-subword-0)

      ("l" avy-goto-line)  )

    (global-set-key (kbd "C-c SPC") 'goto/body))

#+end_src

** Command Completion
#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :bind (("C-c C-r" . ivy-resume))
  :config (ivy-mode t))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("C-x b" . counsel-switch-buffer)))

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)))

(use-package ivy-hydra
  :ensure t)

#+end_src
** Text Completion and Expansion
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :ensure t
       :bind (("C-<tab>" . company-complete)
	      :map company-active-map
		   ("C-n" . company-select-next)
		   ("C-p" . company-select-previous))

       :config
       (setq company-ide-delay 0)
       (global-company-mode t)
       (setq company-backends
	     '((company-files 
		company-keywords 
		company-capf
		company-dabbrev-code))))
     (use-package yasnippet
       :ensure t
       :config
       (yas-global-mode))
     (use-package yasnippet-snippets
       :ensure t)
   #+end_src
** Undo
#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
     :demand
     :ensure t
     :init
     (global-undo-tree-mode 1)
     (setf undo-tree-auto-save-history nil)
     (setf undo-tree-history-directory-alist '((".*" . "~/.emacs.d/undo-tree-history/"))))
#+end_src
** PATH
#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
    :ensure t
    :demand t
    :config (exec-path-from-shell-initialize))
#+end_src
** Scratch
#+begin_src emacs-lisp :tangle yes
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message nil)
#+end_src
** Server Sync
#+begin_src emacs-lisp :tangle yes
  (use-package f
    :ensure t)
  '
  (use-package s
    :ensure t)

  (defcustom remote-sync-root "/home/nate/sync/"
    "Path to the directory for storing synced remote directories")

  (defcustom remote-sync-servercmd-alist '(("autobot" . "/home/nchodosh/.local/bin/unison"))
    "Alist for associating remote hosts with servercmds")

  (defun sync-to-local (remote-directory)
    (interactive "DRoot directory to sync: ")
    (cl-assert (file-remote-p remote-directory) t "Non-remote directory selected for local sync")
    (let ((host-name (file-remote-p remote-directory 'host))
	  (dirname (f-base (file-remote-p remote-directory 'localname)))
	  (remote-path (f-dirname (file-remote-p remote-directory 'localname))))
      (cl-assert (assoc host-name remote-sync-servercmd-alist)
		 "Host not found in remote-sync-servercmd-alist")
      (let (;(output-buffer (generate-new-buffer (format "unison [%s]" dirname)))
	    (local-directory (f-join remote-sync-root dirname))
	    (remote-unison-target (format "ssh://%s/" host-name))
	    (remote-servercmd (cdr (assoc host-name remote-sync-servercmd-alist))))
	(let ((default-directory local-directory))
	  (add-dir-local-variable nil 'server-sync-remote-host host-name)
	  (add-dir-local-variable nil 'server-sync-remote-path remote-path)
	  (add-dir-local-variable nil 'server-sync-local-directory local-directory)
	  (make-comint "server-sync" "unison" nil
		       remote-sync-root remote-unison-target
		       "-path" dirname
		       "-servercmd" remote-servercmd)))))

  (defun sync-to-remote ()
    (interactive)
    (message (buffer-local-value 'server-sync-local-directory (current-buffer)))
    (let ((host-name (buffer-local-value 'server-sync-remote-host (current-buffer)))
	  (remote-path (buffer-local-value 'server-sync-remote-path (current-buffer)))
	  (local-directory (buffer-local-value 'server-sync-local-directory (current-buffer))))
      (cl-assert (assoc host-name remote-sync-servercmd-alist)
		 "Host not found in remote-sync-servercmd-alist")
      (let ((dirname (f-base local-directory))
	    (remote-unison-target (format "ssh://%s/" host-name))
	    (remote-servercmd (cdr (assoc host-name remote-sync-servercmd-alist))))
	(let ((default-directory local-directory)
	      (comint-buffer))
	  (setq comint-buffer (make-comint "server-sync" "unison" nil
					   remote-sync-root remote-unison-target
					   "-auto"
					   "-path" dirname
					   "-servercmd" remote-servercmd))
	  (pop-to-buffer-same-window comint-buffer)))))

#+end_src
* Major Modes
** Calculator
#+begin_src emacs-lisp :tangle yes
  (setq
   math-additional-units '((GiB "1024 * MiB" "Giga Byte")
			   (MiB "1024 * KiB" "Mega Byte")
			   (KiB "1024 * B" "Kilo Byte")
			   (B nil "Byte")
			   (Gib "1024 * Mib" "Giga Bit")
			   (Mib "1024 * Kib" "Mega Bit")
			   (Kib "1024 * bit" "Kilo Bit")
			   (bit "B / 8" "Bit"))
   math-units-table nil)
#+end_src
** Text
#+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))

  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))


  (use-package flyspell-correct-ivy
    :ensure t
    :after flyspell-correct)
#+end_src
** Dired
#+begin_src emacs-lisp :tangle yes
(use-package dired-subtree
  :ensure t)
(setq dired-dwim-target t)
(setq dired-listing-switches "-alh")
#+end_src
** Tramp
#+begin_src emacs-lisp :tangle yes
(use-package tramp
  :config
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src
** Shell
#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :ensure t
    :bind (:map vterm-mode-map ("C-l" . vterm-send-C-l)))
#+end_src
*** eshell
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :config
    (require 'em-smart)
    (setq eshell-where-to-jump 'begin)
    (setq eshell-review-quick-commands nil)
    (setq eshell-smart-space-goes-to-end t)
    (setq eshell-prompt-regexp "[^#$|
  ]* \\([#$]\\|\\(|->\\)\\) ")    
    (defmacro with-face (str &rest properties)
      (if (> (length properties) 1)
          `(propertize ,str 'face (list ,@properties))
        (if (= (length properties) 1)
            `(propertize ,str 'face ,@properties)
          str)))
    (defvar eshell-prev-dir "")
    (defvar eshell-prev-time '(0 0 0 0))
    (defun nates-eshell-hook ()
      (set (make-local-variable 'eshell-prev-dir) (eshell/pwd)))
    (defun fancy-prompt ()
      (let (prompt) 
        (setq prompt
              (concat
               (when (or (not (string= eshell-prev-dir (eshell/pwd)))
                         (not (time-less-p (time-subtract (current-time)
                                                          eshell-prev-time)
                                           '(0 30 0 0))))
                 (setq eshell-prev-dir (eshell/pwd))
                 (setq eshell-prev-time (current-time))
                 (concat
                  (with-face user-login-name
                             'eshell-ls-readonly-face)
                  (with-face " @ "
                             'eshell-ls-symlink-face)
                  (with-face (eshell/pwd) 
                             'eshell-ls-directory-face)
                  (with-face "\n")))
               (with-face " |-> " 'font-lock-constant-face)))
        (put-text-property 0 (length prompt) 'read-only t prompt)
        (put-text-property 0 (length prompt) 
                           'rear-nonsticky t prompt)
        prompt))
    
    (defun simple-prompt ()
      " $ ")
    (add-hook 'eshell-mode-hook 'nates-eshell-hook)
    (setq eshell-prompt-function 'fancy-prompt)
    (setq eshell-highlight-prompt nil))
#+END_SRC
** Magit

   #+begin_src emacs-lisp :tangle yes
     (use-package magit
       :ensure t)
   #+end_src
** LATEX
#+begin_src emacs-lisp :tangle yes
  (use-package company-auctex
    :ensure t)

  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'". LaTeX-mode)
    :after (lsp-mode)
    :init (add-hook 'LaTeX-mode-hook #'lsp-mode)
    (add-hook 'LaTeX-mode-hook #'lsp)
    (add-to-list 'lsp-enabled-clients 'digestif))

  (use-package font-latex)

  ;; (use-package auctex
  ;;   :requires tex
  ;;   :mode "\\.tex\\'"
  ;;   :init (add-hook 'LaTeX-mode-hook #'lsp-mode))

  ;; Command for generating pngs of latex equations




  (defun latex-eq-to-png (equation output-file)
    (interactive "MEquation: \nFOuput File: ")
    (let ((file (make-temp-file "latext-to-png" nil ".tex")))
      (with-temp-file file
	(insert (format "\\documentclass[convert={outfile=%s,density=1000},border={0cm 0.2cm}]{standalone}\\usepackage{mymacros} \\begin{document}"
			output-file))
	(insert (format "$%s$" equation))
	(insert "\\end{document}"))
      (start-process-shell-command
       "latex-to-png"
       (get-buffer-create "*latex-to-png compilation*")
       (concat
	"cd "
	temporary-file-directory
	" && "
	"pdflatex "
	"-shell-escape " 
	file))))

  (defun latex-to-png (equation output-file)
    (interactive "MEquation: \nFOuput File: ")
    (let ((file (make-temp-file "latext-to-png" nil ".tex")))
      (with-temp-file file
	(insert (format "\\documentclass[preview,convert={outfile=%s,density=1000}]{standalone}\\usepackage{mymacros} \\begin{document}"
			output-file))
	(insert (format "%s" equation))
	(insert "\\end{document}"))
      (start-process-shell-command
       "latex-to-png"
       (get-buffer-create "*latex-to-png compilation*")
       (concat
	"cd "
	temporary-file-directory
	" && "
	"pdflatex "
	"-shell-escape " 
	file))))

#+end_src
** git
#+BEGIN_SRC emacs-lisp
(defun nates-git-ignore-mode ()
  (add-to-list (make-local-variable 'company-backends) 'company-files))
(add-to-list 'auto-mode-alist '("\\.gitignore\\'" . nates-git-ignore-mode))
#+END_SRC
** Org
    #+begin_src emacs-lisp :tangle yes
      (use-package org
	:bind (("C-c r" . org-capture)
	       ("C-c l" . org-store-link)
	       ("C-c a" . org-agenda)
	       ("C-c b" . org-iswitchb)
	       :map org-mode-map
	       ("C-M-<left>" . org-promote-subtree)
	       ("C-M-<right>" . org-demote-subtree)
	       ("C-M-u" . org-up-element)
	       ("C-M-f" . org-forward-element)
	       ("C-M-b" . org-backward-element)
	       ("C-M-d" . org-down-element))
	:config
	(setq org-directory "~/Documents/org")
	(setq org-default-notes-file "~/Documents/org/agenda/notes.org")
	(setq org-log-done 'time)
	(setq org-capture-templates
	      `(("t" "TODO Nate" entry (file+datetree "~/Documents/org/tasks.org"  "Tasks")
		 "* TODO [#C] %?\n   SCHEDULED: <%<%Y-%m-%d %a>>\n  [%<%Y-%m-%d %a>]\n  %a")
		("n" "Note Here" entry (file+datetree buffer-file-name "Journal")
		 "* %^{Description}
      %?")
		("j" "Journal Entry"
		 entry (file+datetree "~/journal.org")
		 "* %?"
		 :empty-lines 1)
		("N" "Notebook Entry"
		 entry (file+datetree "~/Documents/org/notebook.org")
		 "* %^{Description} %^g %?\nAdded: %U"
		 :empty-lines 1)	  ))
	(setq org-agenda-files
	      '("~/org/"))
	(setq org-modules
	      (quote
	       (org-bbdb org-bibtex org-gnus org-info org-irc
			 org-mhe org-rmail org-w3m org-tempo)))
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((emacs-lisp . t)
	   (python . t)))
	(setq org-latex-pdf-process '("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f")))

      (use-package org-journal
	:ensure t
	:config
	(setq org-journal-dir "~/Documents/org/journal/"
	      org-journal-file-type 'monthly))
    #+end_src
** Programming
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :custom (flycheck-checker-error-threshold 4000 "Errors!"))
#+end_src
*** Emacs Lisp
    #+begin_src emacs-lisp :tangle yes
      (use-package paredit
	:ensure t
	:hook ((emacs-lisp-mode . paredit-mode)
	       (eval-expression-minibuffer-setup . paredit-mode)
	       (lisp-mode . paredit-mode))
	:bind (("C-)" . paredit-forward-slurp-sexp)
	       ("C-(" . paredit-backward-slurp-sexp)
	       ("C-}" . paredit-forward-barf-sexp)
	       ("C-{" . paredit-backward-barf-sexp)))

      (use-package eldoc
	:ensure t
	:hook (emacs-lisp-mode . eldoc-mode))
   #+end_src
*** LSP
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :config
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024))
    ;; (lsp-register-client
    ;;  (make-lsp-client :new-connection (lsp-tramp-connection "jedi-language-server")
    ;; 		    :major-modes '(python-mode)
    ;; 		    :remote? t
    ;; 		    :server-id 'jedi-remote))

    ;; (lsp-register-client
    ;;  (make-lsp-client :new-connection (lsp-tramp-connection "pyls")
    ;; 		    :major-modes '(python-mode)
    ;; 		    :remote? t
    ;; 		    :server-id 'pyls-remote))

    ;; (add-to-list 'lsp-enabled-clients 'pyls)
    ;; (add-to-list 'lsp-enabled-clients 'pyls-remote)

    ;; (lsp-register-client
    ;;  (make-lsp-client :new-connection (lsp-tramp-connection "pyright")
    ;; 		    :major-modes '(python-mode)
    ;; 		    :remote? t
    ;; 		    :server-id 'pyright-remote))
    (use-package lsp-ui
      :ensure t
      :hook ((lsp-mode . lsp-ui-mode)))

    :hook
    ((python-mode . lsp-mode)
     (lsp-after-initialize . (lambda () (setq company-backends
					      (delete 'company-capf company-backends))))))

#+end_src
*** Python
#+begin_src emacs-lisp :tangle yes
  (use-package python
    :init
    (add-hook 'python-mode-hook (lambda()
				  (make-local-variable 'company-backends)
				  (setq company-backends '((company-files 
							    company-capf
							    company-dabbrev-code))))))

  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
			    (require 'lsp-python-ms)
			    (lsp)))
    :config
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-tramp-connection  "/home/nchodosh/.local/etc/mspyls/Microsoft.Python.LanguageServer")
      :major-modes (append '(python-mode) lsp-python-ms-extra-major-modes)
      :server-id 'mspyls-remote
      :remote? t
      :priority 1
      ;; :initialization-options 'lsp-python-ms--extra-init-params
      ;; :notification-handlers (lsp-ht ("python/languageServerStarted"
      ;; 				    'lsp-python-ms--language-server-started-callback)
      ;;                                ("telemetry/event" 'ignore)
      ;;                                ("python/reportProgress"
      ;; 				    'lsp-python-ms--report-progress-callback)
      ;;                                ("python/beginProgress"
      ;; 				    'lsp-python-ms--begin-progress-callback)
      ;;                                ("python/endProgress"
      ;; 				    'lsp-python-ms--end-progress-callback))
      :initialized-fn (lambda (workspace)
			(with-lsp-workspace workspace
			  (lsp--set-configuration (lsp-configuration-section "python"))))))

    (add-to-list 'lsp-enabled-clients 'mspyls)
    (add-to-list 'lsp-enabled-clients 'mspyls-remote))  ; or lsp-deferred
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :after (lsp-mode)
  ;;   :config
  ;;   ;(add-to-list 'lsp-enabled-clients 'pyright)
  ;;   ;(add-to-list 'lsp-enabled-clients 'pyright-remote)

  ;;   (lsp-register-client
  ;;    (make-lsp-client
  ;;     :new-connection (lsp-tramp-connection (lambda ()
  ;;                                             (cons (lsp-package-path 'pyright)
  ;;                                                   lsp-pyright-langserver-command-args)))
  ;;     :major-modes '(python-mode)
  ;;     :server-id 'pyright-remote
  ;;     :remote? t
  ;;     :multi-root lsp-pyright-multi-root
  ;;     :priority 3
  ;;     :initialized-fn (lambda (workspace)
  ;;                       (with-lsp-workspace workspace
  ;; 			;; we send empty settings initially, LSP server will ask for the
  ;; 			;; configuration of each workspace folder later separately
  ;; 			(lsp--set-configuration
  ;; 			 (make-hash-table :test 'equal))))
  ;;     :download-server-fn (lambda (_client callback error-callback _update?)
  ;;                           (lsp-package-ensure 'pyright callback error-callback))
  ;;     :notification-handlers (lsp-ht ("pyright/beginProgress" 'lsp-pyright--begin-progress-callback)
  ;;                                    ("pyright/reportProgress" 'lsp-pyright--report-progress-callback)
  ;;                                    ("pyright/endProgress" 'lsp-pyright--end-progress-callback)))))


  (define-derived-mode pickle-mode python-mode "pickle"
    "Major mode for viewing pickle files."
    (delete-region (point-min) (point-max))
    (process-file "python" nil t t "-c" (format "import pickle\nprint(pickle.load(open('%s', 'rb')))"
						(file-local-name (buffer-file-name))))
    (set-buffer-modified-p nil)
    (read-only-mode))

  (add-to-list 'auto-mode-alist '("\\.pickle\\'" . pickle-mode))

  ;; (use-package lsp-jedi
  ;;   :ensure t
  ;;   :after (lsp-mode)
  ;;   :config
  ;;     (add-to-list 'lsp-disabled-clients 'pyls)
  ;;     (add-to-list 'lsp-enabled-clients 'jedi))
#+end_src
*** CMAKE
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode :ensure t)
#+END_SRC

*** C++
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :config
    (setq c-default-style
          (quote
           ((c++-mode . "k&r")
            (java-mode . "java")
            (awk-mode . "awk")
            (other . "gnu"))))
    (setq c-offsets-alist (quote ((statement-cont first c-lineup-assignments +))))

    (defun my-c++-mode-hook ()
      (add-to-list
       'imenu-generic-expression
       '("Function Header" 
         "^\\s-*\\([a-zA-Z0-9_:><]+\\s-+\\)+\\([a-zA-Z0-9_]+\\)([-a-zA-Z0-9[:space:]:<>,=_*&()\n]*);"
         2))
      (setq imenu-create-index-function 'my-merge-imenu))

    (add-hook 'c++-mode-hook 'my-c++-mode-hook)

    (defun my-c-mode-common-hook ()
      ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
      (c-set-offset 'substatement-open 0)
      ;; other customizations can go here

      (setq c++-tab-always-indent t)
      (setq c-basic-offset 2)                  ;; Default is 2
      (setq c-indent-level 2)                  ;; Default is 2

      (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
      (setq tab-width 2)
      (setq indent-tabs-mode nil)
      (setq column-number-mode t)
      (setq compile-command "make all")
      (local-set-key (kbd "C-c C-c") 'recompile))


    (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode)))
#+END_SRC

*** BASH
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :demand
    :config
    (add-to-list 'auto-mode-alist 
                 '("\\.bashrc.*" . shell-script-mode)))
#+END_SRC

*** LISP
#+begin_src emacs-lisp :tangle yes
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+end_src
